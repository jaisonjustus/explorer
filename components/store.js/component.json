{
  "name": "store.js",
  "description": "A localStorage wrapper for all browsers without using cookies or flash. Uses localStorage, globalStorage, and userData behavior under the hood",
  "version": "1.3.3",
  "homepage": "https://github.com/marcuswestin/store.js",
  "author": {
    "name": "Marcus Westin",
    "email": "narcvs@gmail.com",
    "url": "http://marcuswest.in"
  },
  "contributors": [
    {
      "name": "Matt Pizzimenti",
      "email": "mjpizz+github@gmail.com",
      "url": "http://mjpizz.com"
    },
    {
      "name": "Long Ouyang",
      "url": "https://github.com/longouyang"
    },
    {
      "name": "Paul Irish",
      "url": "http://paulirish.com"
    },
    {
      "name": "Guillermo Rauch",
      "email": "rauchg@gmail.com",
      "url": "https://github.com/guille"
    },
    {
      "name": "whitmer",
      "url": "https://github.com/whitmer"
    },
    {
      "name": "Steven Black",
      "email": "steveb@stevenblack.com",
      "url": "https://github.com/StevenBlack"
    },
    {
      "name": "Marcus Tucker",
      "email": "info@marcustucker.com",
      "url": "https://github.com/MarcusJT"
    },
    {
      "name": "Leonid Bugaev",
      "email": "leonsbox@gmail.com",
      "url": "https://github.com/buger"
    },
    {
      "name": "Per Eckerdal",
      "email": "per.eckerdal@gmail.com",
      "url": "https://github.com/pereckerdal"
    },
    {
      "name": "Fredrik Blomqvist",
      "url": "https://github.com/blq"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/marcuswestin/store.js.git"
  },
  "bugs": {
    "url": "http://github.com/marcuswestin/store.js/issues"
  },
  "engines": {
    "browser": "*",
    "node": "*"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://raw.github.com/marcuswestin/store.js/master/store.js"
    }
  ],
  "main": "store",
  "directories": {
    "lib": "."
  },
  "devDependencies": {
    "uglify-js": "v1.2.5"
  },
  "files": [
    ""
  ],
  "readme": "store.js\n========\n\nstore.js exposes a simple API for cross browser local storage\n\n\t// Store 'marcus' at 'username'\n\tstore.set('username', 'marcus')\n\t\n\t// Get 'username'\n\tstore.get('username')\n\t\n\t// Remove 'username'\n\tstore.remove('username')\n\t\n\t// Clear all keys\n\tstore.clear()\n\t\n\t// Store an object literal - store.js uses JSON.stringify under the hood\n\tstore.set('user', { name: 'marcus', likes: 'javascript' })\n\t\n\t// Get the stored object - store.js uses JSON.parse under the hood\n\tvar user = store.get('user')\n\talert(user.name + ' likes ' + user.likes)\n\nstore.js depends on JSON for serialization.\n\nHow does it work?\n------------------\nstore.js uses localStorage when available, and falls back on globalStorage for earlier versions of Firefox and the userData behavior in IE6 and IE7. No flash to slow down your page load. No cookies to fatten your network requests.\n\nSerialization\n-------------\nlocalStorage, when used without store.js, calls toString on all stored values. This means that you can't conveniently store and retrieve numbers, objects or arrays:\n\n\tlocalStorage.myage = 24\n\tlocalStorage.myage !== 24\n\tlocalStorage.myage === '24'\n\t\n\tlocalStorage.user = { name: 'marcus', likes: 'javascript' }\n\tlocalStorage.user === \"[object Object]\"\n\t\n\tlocalStorage.tags = ['javascript', 'localStorage', 'store.js']\n\tlocalStorage.tags.length === 32\n\tlocalStorage.tags === \"javascript,localStorage,store.js\"\n\nWhat we want (and get with store.js) is\n\n\tstore.set('myage', 24)\n\tstore.get('myage') === 24\n\t\n\tstore.set('user', { name: 'marcus', likes: 'javascript' })\n\talert(\"Hi my name is \" + store.get('user').name + \"!\")\n\t\n\tstore.set('tags', ['javascript', 'localStorage', 'store.js'])\n\talert(\"We've got \" + store.get('tags').length + \" tags here\")\n\nThe native serialization engine of javascript is JSON. Rather than leaving it up to you to serialize and deserialize your values, store.js uses JSON.stringify() and JSON.parse() on each call to store.set() and store.get(), respectively.\n\nSome browsers do not have native support for JSON. For those browsers you should include [JSON.js] (non-minified copy is included in this repo).\n\nTests\n-----\nGo to test.html in your browser.\n\n(Note that test.html must be served over http:// or https://. This is because localStore does not work in some browsers when using the file:// protocol)\n\nSupported browsers\n------------------\n - Tested in Firefox 2.0\n - Tested in Firefox 3.0\n - Tested in Firefox 3.5\n - Tested in Firefox 3.6\n - Tested in Firefox 4.0\n - Tested in Chrome 5\n - Tested in Chrome 6\n - Tested in Chrome 7\n - Tested in Chrome 8\n - Tested in Chrome 10\n - Tested in Chrome 11\n - Tested in Safari 4\n - Tested in Safari 5\n - Tested in IE6\n - Tested in IE7\n - Tested in IE8\n - Tested in Opera 10\n   - Opera 10.54\n\nStorage limits\n--------------\n - IE6: 1MB\n - IE7: 1MB\n\nSupported but broken (please help fix)\n--------------------------------------\n - Chrome 4\n - Opera 10.10\n\nUnsupported browsers\n-------------------\n - Firefox 1.0: no means (beside cookies and flash)\n - Safari 2: no means (beside cookies and flash)\n - Safari 3: no synchronous api (has asynch sqlite api, but store.js is synch)\n - Opera 9: don't know if there is synchronous api for storing data locally\n - Firefox 1.5: don't know if there is synchronous api for storing data locally\n\nForks\n----\n - Original: https://github.com/marcuswestin/store.js\n - Sans JSON support (simple key/values only): https://github.com/cloudhead/store.js\n - jQueryfied version: https://github.com/whitmer/store.js \n - Lint.js passing version (with semi-colons): https://github.com/StevenBlack/store.js\n \nTODO\n----\n - What are the storage capacities/restrictions per browser?\n - I believe underlying APIs can throw under certain conditions. Where do we need try/catch?\n - Test different versions of Opera 10.X explicitly\n\n\n  [JSON.js]: http://www.json.org/json2.js\n",
  "readmeFilename": "README.md",
  "_id": "store@1.3.3"
}